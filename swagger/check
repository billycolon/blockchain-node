#!/bin/sh

## Check Swagger-generated files under version control are up-to-date.
##
## Moves Swagger-generated files under version control to temporary
## directory, then attempts to re-generate them, finally checks that
## they are the same.  The code is allowed to differ in blank lines.
##
## On failure, it leaves the working directory without the generated
## files - as previously moved to a temporary directory.

set -e
set -x

SY="${1:?}" ## Swagger schema YAML file

## Make target for generating Swagger-related files under version
## control.  Assumptions:
## * Make file is in current working directory;
## * Make file is named so that make finds it without specifying
##   additional arguments.
MT="${2:?}"

## Generated Swagger-related files under version control.
SJ="${3:?}" ## Swagger schema JSON file - generated
ES="${4:?}" ## Erlang server code directory - generated
PC="${5:?}" ## Python client code directory - generated

## Move old generated files under version control to temporary
## directory.
TmpDir="$(mktemp -d)"
TmpSJ="${TmpDir:?}"/sj.backup
TmpES="${TmpDir:?}"/es.backup
TmpPC="${TmpDir:?}"/pc.backup
mv "${SJ:?}" "${TmpSJ:?}"
mv "${ES:?}" "${TmpES:?}"
mv "${PC:?}" "${TmpPC:?}"

## Re-generate files.
make "${MT:?}"

## Check that re-generating JSON from YAML lead to same generated JSON.
diff "${SJ:?}" "${TmpSJ:?}"
## Check that re-generating code from YAML lead to same generated code.
diff -r -NB "${ES:?}" "${TmpES:?}"
diff -r -NB "${PC:?}" "${TmpPC:?}"

## On success, as re-generated files are the same of the old generated
## files, delete the temporary directory containing the olf generated
## files.
rm -r "${TmpDir:?}"
