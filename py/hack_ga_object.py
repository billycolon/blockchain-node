# coding: utf-8

"""
    Aeternity node

    This is the [Aeternity](https://www.aeternity.com/) node API.  # noqa: E501

    OpenAPI spec version: 3.0.0-alpha.1
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.encoded_byte_array import EncodedByteArray  # noqa: F401,E501
from swagger_client.models.encoded_hash import EncodedHash  # noqa: F401,E501

class GAObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'caller_id': 'EncodedHash',
        'height': 'int',
        'gas_price': 'int',
        'gas_used': 'int',
        'return_value': 'EncodedByteArray',
        'return_type': 'str',
        'inner_object': 'TxInfoObject'
    }

    attribute_map = {
        'caller_id': 'caller_id',
        'height': 'height',
        'gas_price': 'gas_price',
        'gas_used': 'gas_used',
        'return_value': 'return_value',
        'return_type': 'return_type',
        'inner_object': 'inner_object'
    }

    def __init__(self, caller_id=None, height=None, gas_price=None, gas_used=None, return_value=None, return_type=None, inner_object=None):  # noqa: E501
        """GAObject - a model defined in Swagger"""  # noqa: E501

        self._caller_id = None
        self._height = None
        self._gas_price = None
        self._gas_used = None
        self._return_value = None
        self._return_type = None
        self._inner_object = None
        self.discriminator = None

        self.caller_id = caller_id
        self.height = height
        self.gas_price = gas_price
        self.gas_used = gas_used
        self.return_value = return_value
        self.return_type = return_type
        if inner_object is not None:
            self.inner_object = inner_object

    @property
    def caller_id(self):
        """Gets the caller_id of this GAObject.  # noqa: E501


        :return: The caller_id of this GAObject.  # noqa: E501
        :rtype: EncodedHash
        """
        return self._caller_id

    @caller_id.setter
    def caller_id(self, caller_id):
        """Sets the caller_id of this GAObject.


        :param caller_id: The caller_id of this GAObject.  # noqa: E501
        :type: EncodedHash
        """
        if caller_id is None:
            raise ValueError("Invalid value for `caller_id`, must not be `None`")  # noqa: E501

        self._caller_id = caller_id

    @property
    def height(self):
        """Gets the height of this GAObject.  # noqa: E501


        :return: The height of this GAObject.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this GAObject.


        :param height: The height of this GAObject.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def gas_price(self):
        """Gets the gas_price of this GAObject.  # noqa: E501


        :return: The gas_price of this GAObject.  # noqa: E501
        :rtype: int
        """
        return self._gas_price

    @gas_price.setter
    def gas_price(self, gas_price):
        """Sets the gas_price of this GAObject.


        :param gas_price: The gas_price of this GAObject.  # noqa: E501
        :type: int
        """
        if gas_price is None:
            raise ValueError("Invalid value for `gas_price`, must not be `None`")  # noqa: E501

        self._gas_price = gas_price

    @property
    def gas_used(self):
        """Gets the gas_used of this GAObject.  # noqa: E501


        :return: The gas_used of this GAObject.  # noqa: E501
        :rtype: int
        """
        return self._gas_used

    @gas_used.setter
    def gas_used(self, gas_used):
        """Sets the gas_used of this GAObject.


        :param gas_used: The gas_used of this GAObject.  # noqa: E501
        :type: int
        """
        if gas_used is None:
            raise ValueError("Invalid value for `gas_used`, must not be `None`")  # noqa: E501

        self._gas_used = gas_used

    @property
    def return_value(self):
        """Gets the return_value of this GAObject.  # noqa: E501


        :return: The return_value of this GAObject.  # noqa: E501
        :rtype: EncodedByteArray
        """
        return self._return_value

    @return_value.setter
    def return_value(self, return_value):
        """Sets the return_value of this GAObject.


        :param return_value: The return_value of this GAObject.  # noqa: E501
        :type: EncodedByteArray
        """
        if return_value is None:
            raise ValueError("Invalid value for `return_value`, must not be `None`")  # noqa: E501

        self._return_value = return_value

    @property
    def return_type(self):
        """Gets the return_type of this GAObject.  # noqa: E501

        The status of the call 'ok | error'.  # noqa: E501

        :return: The return_type of this GAObject.  # noqa: E501
        :rtype: str
        """
        return self._return_type

    @return_type.setter
    def return_type(self, return_type):
        """Sets the return_type of this GAObject.

        The status of the call 'ok | error'.  # noqa: E501

        :param return_type: The return_type of this GAObject.  # noqa: E501
        :type: str
        """
        if return_type is None:
            raise ValueError("Invalid value for `return_type`, must not be `None`")  # noqa: E501

        self._return_type = return_type

    @property
    def inner_object(self):
        """Gets the inner_object of this GAObject.  # noqa: E501


        :return: The inner_object of this GAObject.  # noqa: E501
        :rtype: object
        """
        return self._inner_object

    @inner_object.setter
    def inner_object(self, inner_object):
        """Sets the inner_object of this GAObject.


        :param inner_object: The inner_object of this GAObject.  # noqa: E501
        :type: object
        """

        self._inner_object = inner_object

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GAObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GAObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
