# coding: utf-8

"""
    Aeternity node

    This is the [Aeternity](https://www.aeternity.com/) node API.  # noqa: E501

    OpenAPI spec version: 5.0.0-rc.1
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.dry_run_account import DryRunAccount  # noqa: F401,E501
from swagger_client.models.encoded_byte_array import EncodedByteArray  # noqa: F401,E501
from swagger_client.models.encoded_hash import EncodedHash  # noqa: F401,E501


class DryRunInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'top': 'EncodedHash',
        'accounts': 'list[DryRunAccount]',
        'txs': 'list[EncodedByteArray]'
    }

    attribute_map = {
        'top': 'top',
        'accounts': 'accounts',
        'txs': 'txs'
    }

    def __init__(self, top=None, accounts=None, txs=None):  # noqa: E501
        """DryRunInput - a model defined in Swagger"""  # noqa: E501

        self._top = None
        self._accounts = None
        self._txs = None
        self.discriminator = None

        if top is not None:
            self.top = top
        if accounts is not None:
            self.accounts = accounts
        self.txs = txs

    @property
    def top(self):
        """Gets the top of this DryRunInput.  # noqa: E501


        :return: The top of this DryRunInput.  # noqa: E501
        :rtype: EncodedHash
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this DryRunInput.


        :param top: The top of this DryRunInput.  # noqa: E501
        :type: EncodedHash
        """

        self._top = top

    @property
    def accounts(self):
        """Gets the accounts of this DryRunInput.  # noqa: E501

        Accounts  # noqa: E501

        :return: The accounts of this DryRunInput.  # noqa: E501
        :rtype: list[DryRunAccount]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this DryRunInput.

        Accounts  # noqa: E501

        :param accounts: The accounts of this DryRunInput.  # noqa: E501
        :type: list[DryRunAccount]
        """

        self._accounts = accounts

    @property
    def txs(self):
        """Gets the txs of this DryRunInput.  # noqa: E501

        Txs  # noqa: E501

        :return: The txs of this DryRunInput.  # noqa: E501
        :rtype: list[EncodedByteArray]
        """
        return self._txs

    @txs.setter
    def txs(self, txs):
        """Sets the txs of this DryRunInput.

        Txs  # noqa: E501

        :param txs: The txs of this DryRunInput.  # noqa: E501
        :type: list[EncodedByteArray]
        """
        if txs is None:
            raise ValueError("Invalid value for `txs`, must not be `None`")  # noqa: E501

        self._txs = txs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DryRunInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DryRunInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
