# coding: utf-8

"""
    Aeternity Epoch

    This is the [Aeternity](https://www.aeternity.com/) Epoch API.  # noqa: E501

    OpenAPI spec version: 0.8.0
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.encoded_hash import EncodedHash  # noqa: F401,E501
from swagger_client.models.json_tx import JSONTx  # noqa: F401,E501


class CoinbaseTxJSON(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'EncodedHash',
        'height': 'int',
        'reward': 'int'
    }

    attribute_map = {
        'account': 'account',
        'height': 'height',
        'reward': 'reward'
    }

    def __init__(self, account=None, height=None, reward=None):  # noqa: E501
        """CoinbaseTxJSON - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._height = None
        self._reward = None
        self.discriminator = None

        self.account = account
        self.height = height
        self.reward = reward

    @property
    def account(self):
        """Gets the account of this CoinbaseTxJSON.  # noqa: E501


        :return: The account of this CoinbaseTxJSON.  # noqa: E501
        :rtype: EncodedHash
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CoinbaseTxJSON.


        :param account: The account of this CoinbaseTxJSON.  # noqa: E501
        :type: EncodedHash
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def height(self):
        """Gets the height of this CoinbaseTxJSON.  # noqa: E501


        :return: The height of this CoinbaseTxJSON.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this CoinbaseTxJSON.


        :param height: The height of this CoinbaseTxJSON.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def reward(self):
        """Gets the reward of this CoinbaseTxJSON.  # noqa: E501


        :return: The reward of this CoinbaseTxJSON.  # noqa: E501
        :rtype: int
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this CoinbaseTxJSON.


        :param reward: The reward of this CoinbaseTxJSON.  # noqa: E501
        :type: int
        """
        if reward is None:
            raise ValueError("Invalid value for `reward`, must not be `None`")  # noqa: E501

        self._reward = reward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoinbaseTxJSON):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
